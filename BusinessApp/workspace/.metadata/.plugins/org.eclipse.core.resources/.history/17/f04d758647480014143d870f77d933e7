package com.fervil.spring.careercoach.service;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.fervil.spring.careercoach.model.dao.UserProfileDao;
import com.fervil.spring.careercoach.model.domain.UserProfile;

@Service
public class BasicUserProfileManager implements UserProfileManager {
    private static final Logger logger = LoggerFactory.getLogger(BasicUserProfileManager.class);

    /**
	 * 
	 */
	private static final long serialVersionUID = 5074238788090809666L;
	/**
	 * 
	 */
	@Autowired
	private UserProfileDao userProfileDao;

    @NotNull
    @Override
    public List<UserProfile> getUserProfiles() throws Exception {
        return userProfileDao.findAll();
	}

    @NotNull
    @Override
	public List<UserProfile> getUserProfiles(int coachingCategory, int coachingSubcategory, int industryExperience, String companyExperience, String coachFirstName, String coachLastName, String city, String state) throws Exception {
        //return userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
    
    	List userProfiles = userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
                
        for (Iterator<UserProfile> iter = userProfiles.iterator(); iter.hasNext(); ) {
        	UserProfile userProfile = iter.next();
        	
        	userProfile.setProfilepicturestring(userProfile.setP)
            // 1 - can call methods of element
            // 2 - can use iter.remove() to remove the current element from the list

            // ...
        }        
        return userProfiles;
        
    }
    
    public void storeUserProfile(UserProfile userProfile) throws Exception {
    	userProfileDao.store(userProfile);
    }

	public UserProfile findById(String id) throws Exception {
		return userProfileDao.findById(id);
	}

	public UserProfile findById(long id) throws Exception {
		return userProfileDao.findById(id);
	}

	public List<UserProfile> findByUserId(long id) throws Exception {
		return userProfileDao.findByUserId(id);
	}
	
	public void deleteUserProfile(String id) throws Exception {
		userProfileDao.delete(id);
	}
	
    public void setUserProfileDao(UserProfileDao userProfileDao) throws Exception {
        this.userProfileDao = userProfileDao;
    }
}