package com.fervil.spring.careercoach.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.fervil.spring.careercoach.model.dao.UserProfileDao;
import com.fervil.spring.careercoach.model.domain.UserProfile;

@Service
public class BasicUserProfileManager implements UserProfileManager {
    private static final Logger logger = LoggerFactory.getLogger(BasicUserProfileManager.class);

    /**
	 * 
	 */
	private static final long serialVersionUID = 5074238788090809666L;
	/**
	 * 
	 */
	@Autowired
	private UserProfileDao userProfileDao;

    @NotNull
    @Override
    public List<UserProfile> getUserProfiles() throws Exception {
        return userProfileDao.findAll();
	}

    @NotNull
    @Override
	public List<UserProfile> getUserProfiles(int coachingCategory, int coachingSubcategory, int industryExperience, String companyExperience, String coachFirstName, String coachLastName, String city, String state) throws Exception {
        //return userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
    
    	List<UserProfile> userProfiles = userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
        
    	List<UserProfile> newUserProfiles = new ArrayList<UserProfile>();
    	
    	UserProfile tmpUserProfile = null;
    	
        for (Iterator<HashMap> iter = userProfiles.iterator(); iter.hasNext(); ) {
        	
        	tmpUserProfile = new UserProfile();
        	
        	HashMap userProfilemap = iter.next();
        	
        	newUserProfiles.setUserProfileId(userProfilemap.get(userProfileId));
			newUserProfiles.setPhone(userProfilemap.get(phone)); 
			newUserProfiles.setDisplayName(userProfilemap.get(displayName));
			newUserProfiles.setUserProfileType(userProfilemap.get(userProfileType));
			newUserProfiles.setUser_user_id(userProfilemap.get(user_user_id));
			newUserProfiles.setAccountType(userProfilemap.get(accountType)); 
			newUserProfiles.setEmail(userProfilemap.get(email));
			newUserProfiles.setCoachingcategory1(userProfilemap.get(coachingcategory1));
			newUserProfiles.setCoachingcategory2(userProfilemap.get(coachingcategory2));
			newUserProfiles.setCoachingcategory3(userProfilemap.get(coachingcategory3));
			newUserProfiles.setIndustryfocus1(userProfilemap.get(industryfocus1)); 
			newUserProfiles.setIndustryfocus2(userProfilemap.get(industryfocus2)); 
			newUserProfiles.setIndustryfocus3(userProfilemap.get(industryfocus3));
			newUserProfiles.setCompanyexperience1(userProfilemap.get(companyexperience1));
			newUserProfiles.setCompanyexperience2(userProfilemap.get(companyexperience2));
			newUserProfiles.setCompanyexperience3(userProfilemap.get(companyexperience3)); 
			newUserProfiles.setAddress(userProfilemap.get(address)); 
			newUserProfiles.setApartment(userProfilemap.get(apartment)); 
			newUserProfiles.setCity(userProfilemap.get(city));
			newUserProfiles.setState(userProfilemap.get(state)); 
			newUserProfiles.setZipcode(userProfilemap.get(zipcode)); 
			newUserProfiles.setOverview(userProfilemap.get(overview)); 
			newUserProfiles.setServiceDescription(userProfilemap.get(serviceDescription));
			newUserProfiles.setSkillsExpertise(userProfilemap.get(skillsExpertise));
			newUserProfiles.setSummaryOfHighestPosition(userProfilemap.get(summaryOfHighestPosition));
			newUserProfiles.setCompanyOfHighestPosition(userProfilemap.get(companyOfHighestPosition));
			newUserProfiles.setHourlyRate(userProfilemap.get(hourlyRate)); 
			newUserProfiles.setPaymentTerms(userProfilemap.get(paymentTerms)); 
			newUserProfiles.setKeywords(userProfilemap.get(keywords)); 
			newUserProfiles.setModifiedDate(userProfilemap.get(modifiedDate)); 
			newUserProfiles.setCoaching_category(userProfilemap.get(coaching_category));
			newUserProfiles.setcompany_experience(userProfilemap.get(company_experience)); 
			newUserProfiles.setFirstname(userProfilemap.get(firstname)); 
			newUserProfiles.setMiddleinitial(userProfilemap.get(middleinitial));
			newUserProfiles.setLastname(userProfilemap.get(lastname)); 
			newUserProfiles.setLanguage(userProfilemap.get(language));
			newUserProfiles.setCountryname(userProfilemap.get(countryname)); 
			newUserProfiles.setProfilepicture(userProfilemap.get(profilepicture)); 
			newUserProfiles.setProfile_picture_type(userProfilemap.get(profile_picture_type)); 
			newUserProfiles.setProfile_picture_name(userProfilemap.get(profile_picture_name)); 
			newUserProfiles.setVideo_url(userProfilemap.get(video_url));         	
        	
        	
        	
        	
        	userProfilemap.get(key)
    		String imgLen = String.valueOf(userProfile.getProfilepicture());		
    		
    		byte [] rb = new byte[imgLen.length() ];
    		String byteArrayBlobAsString ="";
    		
    		int blobLength = (int) userProfile.getProfilepicture().length();  
    		byte[] blobAsBytes = userProfile.getProfilepicture().getBytes(1, blobLength);			
    			
    		byteArrayBlobAsString = new String(blobAsBytes );
        	
        	userProfile.setProfilepicturestring(byteArrayBlobAsString);
            // 1 - can call methods of element
            // 2 - can use iter.remove() to remove the current element from the list

            // ...
        }        
        return userProfiles;
        
    }
    
    public void storeUserProfile(UserProfile userProfile) throws Exception {
    	userProfileDao.store(userProfile);
    }

	public UserProfile findById(String id) throws Exception {
		return userProfileDao.findById(id);
	}

	public UserProfile findById(long id) throws Exception {
		return userProfileDao.findById(id);
	}

	public List<UserProfile> findByUserId(long id) throws Exception {
		return userProfileDao.findByUserId(id);
	}
	
	public void deleteUserProfile(String id) throws Exception {
		userProfileDao.delete(id);
	}
	
    public void setUserProfileDao(UserProfileDao userProfileDao) throws Exception {
        this.userProfileDao = userProfileDao;
    }
}