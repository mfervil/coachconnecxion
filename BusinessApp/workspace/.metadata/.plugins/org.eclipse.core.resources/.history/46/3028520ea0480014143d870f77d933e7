package com.fervil.spring.careercoach.service;

import java.sql.Blob;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.fervil.spring.careercoach.model.dao.UserProfileDao;
import com.fervil.spring.careercoach.model.domain.UserProfile;

@Service
public class BasicUserProfileManager implements UserProfileManager {
    private static final Logger logger = LoggerFactory.getLogger(BasicUserProfileManager.class);

    /**
	 * 
	 */
	private static final long serialVersionUID = 5074238788090809666L;
	/**
	 * 
	 */
	@Autowired
	private UserProfileDao userProfileDao;

    @NotNull
    @Override
    public List<UserProfile> getUserProfiles() throws Exception {
        return userProfileDao.findAll();
	}

    @NotNull
    @Override
	public List<UserProfile> getUserProfiles(int coachingCategory, int coachingSubcategory, int industryExperience, String companyExperience, String coachFirstName, String coachLastName, String city, String state) throws Exception {
        //return userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
    
    	List<HashMap> userProfiles = userProfileDao.findFilteredUserProfiles(coachingCategory, coachingSubcategory, industryExperience, companyExperience, coachFirstName, coachLastName, city, state);
        
    	List<UserProfile> newUserProfiles = new ArrayList<UserProfile>();
    	
    	UserProfile tmpUserProfile = null;
    	
        for (Iterator<HashMap> iter = userProfiles.iterator(); iter.hasNext(); ) {
        	
        	tmpUserProfile = new UserProfile();
        	
        	HashMap userProfilemap = iter.next();
        	
        	tmpUserProfile.setUserProfileId((Long)userProfilemap.get("userProfileId"));
        	tmpUserProfile.setPhone((String)userProfilemap.get("phone")); 
        	tmpUserProfile.setDisplayName((String) userProfilemap.get("displayName"));
        	tmpUserProfile.setUserProfileType((Integer) userProfilemap.get("userProfileType"));
        	tmpUserProfile.setUser_userId((Long) userProfilemap.get("user_user_id"));
        	tmpUserProfile.setAccountType((Integer) userProfilemap.get("accountType")); 
        	tmpUserProfile.setEmail((String) userProfilemap.get("email"));
        	tmpUserProfile.setCoachingcategory1((Integer) userProfilemap.get("coachingcategory1"));
        	tmpUserProfile.setCoachingcategory2((Integer) userProfilemap.get("coachingcategory2"));
        	tmpUserProfile.setCoachingcategory3((Integer) userProfilemap.get("coachingcategory3"));
        	tmpUserProfile.setIndustryfocus1((Integer) userProfilemap.get("industryfocus1")); 
        	tmpUserProfile.setIndustryfocus2((Integer) userProfilemap.get("industryfocus2")); 
        	tmpUserProfile.setIndustryfocus3((Integer) userProfilemap.get("industryfocus3"));
        	tmpUserProfile.setCompanyexperience1((String) userProfilemap.get("companyexperience1"));
        	tmpUserProfile.setCompanyexperience2((String) userProfilemap.get("companyexperience2"));
        	tmpUserProfile.setCompanyexperience3((String) userProfilemap.get("companyexperience3")); 
        	tmpUserProfile.setAddress((String) userProfilemap.get("address")); 
        	tmpUserProfile.setApartment((String) userProfilemap.get("apartment")); 
        	tmpUserProfile.setCity((String) userProfilemap.get("city"));
        	tmpUserProfile.setState((String) userProfilemap.get("state")); 
        	tmpUserProfile.setZipcode((String) userProfilemap.get("zipcode")); 
        	tmpUserProfile.setOverview((String) userProfilemap.get("overview")); 
        	tmpUserProfile.setServiceDescription((String) userProfilemap.get("serviceDescription"));
        	tmpUserProfile.setSkillsExpertise((String) userProfilemap.get("skillsExpertise"));
        	tmpUserProfile.setSummaryOfHighestPosition((String) userProfilemap.get("summaryOfHighestPosition"));
        	tmpUserProfile.setCompanyOfHighestPosition((String) userProfilemap.get("companyOfHighestPosition"));
        	tmpUserProfile.setHourlyRate((Double) userProfilemap.get("hourlyRate")); 
        	tmpUserProfile.setPaymentTerms((String) userProfilemap.get("paymentTerms")); 
        	tmpUserProfile.setKeywords((String) userProfilemap.get("keywords")); 
        	tmpUserProfile.setModifiedDate((Date) userProfilemap.get("modifiedDate")); 
        	tmpUserProfile.setFirstname((String) userProfilemap.get("firstname")); 
        	tmpUserProfile.setMiddleinitial((String) userProfilemap.get("middleinitial"));
        	tmpUserProfile.setLastname((String) userProfilemap.get("lastname")); 
        	tmpUserProfile.setLanguage((String) userProfilemap.get("language"));
        	tmpUserProfile.setCountryname((String) userProfilemap.get("countryname")); 
        	tmpUserProfile.setProfilepicture((Blob) userProfilemap.get("profilepicture")); 
        	tmpUserProfile.setProfile_picture_type((String) userProfilemap.get("profile_picture_type")); 
        	tmpUserProfile.setProfile_picture_name((String) userProfilemap.get("profile_picture_name")); 
        	tmpUserProfile.setVideo_url((String) userProfilemap.get("video_url"));         	
        	
        	
        	
        	
        	userProfilemap.get(key)
    		String imgLen = String.valueOf(userProfile.getProfilepicture());		
    		
    		byte [] rb = new byte[imgLen.length() ];
    		String byteArrayBlobAsString ="";
    		
    		int blobLength = (int) userProfile.getProfilepicture().length();  
    		byte[] blobAsBytes = userProfile.getProfilepicture().getBytes(1, blobLength);			
    			
    		byteArrayBlobAsString = new String(blobAsBytes );
        	
        	userProfile.setProfilepicturestring(byteArrayBlobAsString);
            // 1 - can call methods of element
            // 2 - can use iter.remove() to remove the current element from the list

            // ...
        }        
        return userProfiles;
        
    }
    
    public void storeUserProfile(UserProfile userProfile) throws Exception {
    	userProfileDao.store(userProfile);
    }

	public UserProfile findById(String id) throws Exception {
		return userProfileDao.findById(id);
	}

	public UserProfile findById(long id) throws Exception {
		return userProfileDao.findById(id);
	}

	public List<UserProfile> findByUserId(long id) throws Exception {
		return userProfileDao.findByUserId(id);
	}
	
	public void deleteUserProfile(String id) throws Exception {
		userProfileDao.delete(id);
	}
	
    public void setUserProfileDao(UserProfileDao userProfileDao) throws Exception {
        this.userProfileDao = userProfileDao;
    }
}